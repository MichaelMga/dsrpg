1. Abbreviation


  string a :


  capitalize 

  valid or not :
  

   ahash = hash(a (no order))

   bhash = 0;  

   loop on a 

   issue => 

   how to stop looping on the array again and again and again...


   get the first array, and using a search tree to know if we can end up where we want


   a = [aBgzhzezeze] , b = "aaz";


   simple : check if each letter of b is present in a(lower or equal case)

   issue => looping on a too many times.



   

2. 

ALICE KINDERGARTEN


candies ==> 


  relationships between elements.

  possibilities ==> test all configs.

  Meaning? Using a search tree?


       
       search tree =>



     function getMinCandiesNum($arr){
            
          $candiesMin = 0;
          global $higher;
          global 


          for($i=0; $i < count($arr); $i++){


            $candiesTotal = 0;


          
                 //check right side

                $lastNum = 1;


                   for($y = $i+1; $y < count($arr); $y++){         

                            //determine checkedNum value

                               //if val higher than lastNum 
                                  lastNum += 1

                                  else 

                                  lastNum = 1

                            //append ln

                             $candiesTotal += lastNum;

                   }


                $lastNum = 1; 

                 //check left side

                   for($y = $i-1; $y >= 0; $y--){         

                            //determine checkedNum value

                               //if val higher than lastNum 
                                  lastNum += 1

                                  else 

                                  lastNum = 1

                            //append ln

                             $candiesTotal += lastNum;

                   }
          

                 

          }


          return $candiesMin;


     }






3.


    Kingdom division :

    => 2 lords

    So, goal => 0 cities without links.
    

    traverse the tree. return on a node if : 

          Thank to this node, linked node is checkable and unvalited.

          current node is checkable and unvalited



   At the end => Check the hash of this traversal. If it doesn't exist, add the count by one, and store it within the dictionary.

   


4.

   Sherlock and cost :

     
   Ok.easy.
    


   given an array b, whats the maximum s obtainable

   
   $b = [1,5,3,6];




   function getBiggerS($b){
       
         for($i=0; $i < count($b); $i++){
                   
                   traverseTree();


         }


   }




   function traversTree($i , $b , $a)[



      if(count($a) == count($b)){

            calculateS($a);
   
      }else {
        
        for($n=1; $n <= $b[$i]; $n++){

              $updA = $a ; //passed by value

              array_push($updA, $n);
              
              traverseTree($i+1, $b, $updA);

        }

      }


   ]



   

   function calculateS($a){
        
        $s = 0;


       for($i = 0; $i < count($a)-1 $i++){

            //diff between nums

            $diff = $a[i]-$a[i+];

            if($diff < 0){

               $diff = -$diff;

            }

            $s += $diff;

       }

       
       return $s;




   }
 



    

   BF => 






5.



